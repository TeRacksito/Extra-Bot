{
	// Place your eXtra-Bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"A template For a new command": {
		"prefix": "cmd_template",
		"body": [
		  "@nextcord.slash_command(guild_ids=guilds, description=\"A Command\")",
		  "    async def help(self, interaction: nextcord.Interaction):",
		  "        await interaction.response.defer()",
		  "        await interaction.followup.send(\"A Command\")"
		],
		"description": "A template For a new command"
	  },

	  "A template For a new event": {
		"prefix": "event_template",
		"body": [
		  "@commands.Cog.listener()",
		  "    async def on_member_join(self, member):",
		  "         print(\"Great!\")"
		],
		"description": "A template For a new event"
	  },
	  "A template For a new Cog": {
		"prefix": "event_template",
		"body": [
		  "import nextcord, sys",
		  "from nextcord.ext import commands",
		  "sys.path.insert(1, 'cogs\\lib')",
		  "import values as v",
		  "",
		  "class Cog(commands.Cog):",
		  "    def __init__(self, client):",
		  "        self.client = client",
		  "# Setup",
		  "def setup(client):",
		  "    client.add_cog(Welcome(client))"
		],
		"description": "A template For a new Cog"
	  }
}